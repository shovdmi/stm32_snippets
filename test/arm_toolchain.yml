---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.
:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
#  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: gem
  :ceedling_version: 0.30.0
  :default_tasks:
    - test:all

#:test_build:
#  :use_assembly: TRUE

#:release_build:
#  :output: MyApp.out
#  :use_assembly: FALSE

:environment:
#  - :path:
#  - -/opt/gcc-arm-none-eabi-10-2020-q4-major
#  - "#{ENV['PATH']}"

:extension:
  :executable: .elf

:paths:
  :test:
    - +:test/**
    - -:test/support
    - -:test/support
  :source:
#    - src/**
    - ../usb/**
    - ../stm32/**
  :support:
    - test/support
  :libraries: []

:files:
  :support:
    - ../stm32/system_stm32f1xx.c

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines []
  :test:
    - *common_defines
    - TEST
    - TEST_ON_TARGET
    - STM32F103x6
    - CMOCK_MEM_ALIGN=1
    - CMOCK_MEM_SIZE=1024
    - CMOCK_MEM_STATIC
    - RDIMON
  :test_preprocess:
    - *common_defines
    - TEST
    - TEST_ON_TARGET

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

# Add -gcov to the plugins list to make sure of the gcov plugin
# You will need to have gcov and gcovr both installed to make it work.
# For more information on these options, see docs in plugins/gcov
:gcov:
  :reports:
    - HtmlDetailed
  :gcovr:
    :html_medium_threshold: 75
    :html_high_threshold: 90

:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use
  :test_compiler:
    :executable: arm-none-eabi-gcc
    :arguments:
      - -mcpu=cortex-m3
      - -mthumb
      - -c
      - "${1}"
      - -o "${2}"
      - -Wall
      - -Og
      - -g3
      - -fno-eliminate-unused-debug-symbols
      - -ggdb3
      - --specs=rdimon.specs
      - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR #expands to -I search path
      - -I"$": COLLECTION_PATHS_RELEASE_TOOLCHAIN_INCLUDE          #expands to -I search path
      - -D$: COLLECTION_DEFINES_TEST_AND_VENDOR                    #expands to all -D defined symbols
      - -ffunction-sections
      - -fdata-sections
#      - --verbose

  :pre_link_execute:
     :executable: arm-none-eabi-gcc 
     :arguments:
       - '-mcpu=cortex-m3'
       - -mthumb
       - -Og
       - -ggdb3
       - --specs=nano.specs
       - --specs=rdimon.specs
       - "../stm32/startup.S"
       - -c
       - -o "../stm32/startup.o"  

  :test_linker:
    :executable: arm-none-eabi-gcc
    :arguments:
      - '-mcpu=cortex-m3'
      - -mthumb
#      - --specs=nosys.specs
      - -Og
      - -ggdb3
      - --specs=nano.specs
      - --specs=rdimon.specs
      - -T../stm32/STM32F103X6_FLASH.ld
      - "${1}"
      - ../stm32/startup.o
      - -lrdimon
      - -lc
      - -o "${2}"
      - -Wl,--gc-sections
      - -Wl,-Map=output2.map
#      - --verbose

# https://github.com/ThrowTheSwitch/Ceedling/tree/master/plugins/command_hooks
#
  :pre_test_fixture_execute:
     :executable: /opt/SEGGER/JLink_V698a/JLinkGDBServer
     :name: 'gdb server test fixture'
     :stderr_redirect: :none
     :background_exec: :auto
     :arguments:
        - -device STM32F103C6
        - -if SWD
        - -speed 4000
        - -vd             # verify downloads
        - -nogui
        - -silent
        - -singlerun
        - -timeout 10  

  :test_fixture:
     :executable: ruby
     :name: 'gdb server test fixture'
     :stderr_redirect: :auto   #inform Ceedling what model of $stderr capture to use
     :arguments:
        - test/test_on_target_fixture.rb
        - "${1}"

#     :executable: arm-none-eabi-gdb 
#     :name: 'gdb test fixture'
#     :stderr_redirect: :tcsh   #inform Ceedling what model of $stderr capture to use
#     :arguments:
#        - "${1}"    #binary executable input file to simulator (Ruby method call param list sub)
#        - -x gdb_script
#        - -ex=continue
#        - -quiet    # No greetings at the start

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "-l${1}"
  :path_flag: "-L ${1}"
  :system: []    # for example, you might list 'm' to grab the math library
  :test: []
  :release: []

:plugins:
  :load_paths:
    - "#{Ceedling.load_path}"
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
    - command_hooks
...
